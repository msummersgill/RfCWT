// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// start_profiler
SEXP start_profiler(SEXP str);
RcppExport SEXP _RfCWT_start_profiler(SEXP strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type str(strSEXP);
    rcpp_result_gen = Rcpp::wrap(start_profiler(str));
    return rcpp_result_gen;
END_RCPP
}
// stop_profiler
SEXP stop_profiler();
RcppExport SEXP _RfCWT_stop_profiler() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(stop_profiler());
    return rcpp_result_gen;
END_RCPP
}
// fCWT
Rcpp::List fCWT(std::vector<float> x, int fn, float f0, float f1, float fs, int nthreads, bool optimize, std::string flags, std::string dist, bool normalization, float bandwidth);
RcppExport SEXP _RfCWT_fCWT(SEXP xSEXP, SEXP fnSEXP, SEXP f0SEXP, SEXP f1SEXP, SEXP fsSEXP, SEXP nthreadsSEXP, SEXP optimizeSEXP, SEXP flagsSEXP, SEXP distSEXP, SEXP normalizationSEXP, SEXP bandwidthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<float> >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type fn(fnSEXP);
    Rcpp::traits::input_parameter< float >::type f0(f0SEXP);
    Rcpp::traits::input_parameter< float >::type f1(f1SEXP);
    Rcpp::traits::input_parameter< float >::type fs(fsSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< bool >::type optimize(optimizeSEXP);
    Rcpp::traits::input_parameter< std::string >::type flags(flagsSEXP);
    Rcpp::traits::input_parameter< std::string >::type dist(distSEXP);
    Rcpp::traits::input_parameter< bool >::type normalization(normalizationSEXP);
    Rcpp::traits::input_parameter< float >::type bandwidth(bandwidthSEXP);
    rcpp_result_gen = Rcpp::wrap(fCWT(x, fn, f0, f1, fs, nthreads, optimize, flags, dist, normalization, bandwidth));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RfCWT_start_profiler", (DL_FUNC) &_RfCWT_start_profiler, 1},
    {"_RfCWT_stop_profiler", (DL_FUNC) &_RfCWT_stop_profiler, 0},
    {"_RfCWT_fCWT", (DL_FUNC) &_RfCWT_fCWT, 11},
    {NULL, NULL, 0}
};

RcppExport void R_init_RfCWT(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
